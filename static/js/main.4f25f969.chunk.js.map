{"version":3,"sources":["logo.svg","App.js","mortgageMath.js","rate.js","graphMort.js","tableMort.js","mortForm.js","index.js"],"names":["module","exports","App","monthCost","p","i","n","console","log","Math","pow","amortization_table","due","balance","interest","mort_table","round","month","args","tot_int","tot_mort","length","m_interest","m_amortization","push","payed","amortization","tot_cost","React","Component","TableRow","props","state","handlePay","bind","update","event","this","setState","target","value","onChange","row","onBlur","colors","GraphMort","mortTables","descriptions","graphSlots","graphYears","dataKey","max_month","step","graphData","data_point","width","height","data","margin","top","right","left","bottom","strokeDasharray","verticalAlign","map","type","fillOpacity","stroke","TableMort","maxRows","tableRows","tableData","className","description","index","MortForm","principal","years","submitted","mort_tables","handlePrincipal","handleInterest","handleYears","handleGraph","handleGraphYears","Number","month_int","due_monthly","slice","preventDefault","onSubmit","getGraph","getTable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f25f969.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export function monthCost(p, i, n) {\n    console.log(\"principal is\");\n    console.log(p)\n    console.log(\"interest per month is \")\n    console.log(i)\n    console.log(\"months: \")\n    console.log(n)\n\n    return (p * ( i* Math.pow(1 + i, n) ) / (Math.pow(1 + i, n) - 1) )\n\n}\n\nexport function amortization_table(due, balance, interest, ...args) {\n    let mort_table = []\n        console.log(balance)\n        console.log(due)\n        due = Math.round(due)\n        let month = 0\n        console.log(args)\n        let tot_int = 0;\n        let tot_mort = 0;\n        if (args.length === 3) {\n            month = args[0]\n            tot_int = args[1]\n            tot_mort = args[2]\n        }\n        \n        while (balance > 0 && month < 500) {\n            let m_interest = Math.round(balance * interest)\n            let m_amortization = due - m_interest\n            balance = balance - m_amortization\n            tot_mort += m_amortization\n            tot_int += m_interest\n            mort_table.push(\n                {\n                    month: month,\n                    payed: due,\n                    interest: m_interest,\n                    amortization: m_amortization,\n                    balance: balance,\n                    tot_int: tot_int,\n                    tot_mort: tot_mort,\n                    tot_cost: tot_mort + tot_int\n                }\n            )\n            /*\n            if ((month % 12) === 0) {\n                console.log(\n                    {\n                        month: month,\n                        payed: due,\n                        interest: m_interest,\n                        amortization: m_amortization,\n                        balance: balance,\n                    }  \n                )\n            }\n            */\n            month = month + 1\n        }\n\n    return mort_table\n}","import React from 'react';\nimport { monthCost, amortization_table} from './mortgageMath'\n\nexport class RateForm extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {principal: 214544,\n                      interest: 3.5,\n                      years: 30,\n                      submitted: false,\n                      month: 0,\n                      mort_table: []\n                    };\n        this.handlePrincipal = this.handlePrincipal.bind(this);\n        this.handleInterest = this.handleInterest.bind(this);\n        this.handleYears = this.handleYears.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.updatePayment = this.updatePayment.bind(this);\n\n\n    }\n\n    handlePrincipal(event) {\n        this.setState({principal: event.target.value});\n    }\n\n    handleInterest(event) {\n        this.setState({interest: event.target.value});\n    }\n\n    handleYears(event) {\n        this.setState({years: event.target.value});\n    }\n\n    handleSubmit(event) {\n        console.log(this.state.interest)\n        console.log(this.state.years)\n        let month_int = this.state.interest * .01 / 12;\n        let due_monthly = monthCost(this.state.principal, month_int, this.state.years * 12)\n        let mort_table = amortization_table(due_monthly, this.state.principal, month_int)\n        this.setState(\n            { month: due_monthly,\n              mort_table: mort_table\n            }\n        );\n\n        this.setState({submitted: true});\n\n    \n\n\n        event.preventDefault();\n    }\n\n    getCost() {\n        if (this.state.submitted) {\n            let total = this.state.month * this.state.years * 12\n            return <h3>Total loan cost is: {total}</h3>\n        } else {\n            return <h3>Total loan cost is: </h3>\n        }\n    }\n\n    getAmortizationTable() {\n        return (\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Month</th>\n                        <th>Payed</th>\n                        <th>Interest</th>\n                        <th>Amortization</th>\n                        <th>Tot Inter.</th>\n                        <th>Tot Amort</th>\n                        <th>Tot Cost</th>\n                        <th>Balance</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.mort_table.map((row, i) => {\n                        return (\n\n                            <TableRow \n                                key = {i}\n                                month ={row.month}\n                                payed = {row.payed}\n                                interest = {row.interest}\n                                amortization = {row.amortization}\n                                tot_int = {row.tot_int}\n                                tot_mort = {row.tot_mort}\n                                balance = {row.balance}\n                                onChange = {this.updatePayment}\n                            />\n\n                        );\n                    })}\n                </tbody>\n            </table>\n          );\n\n    }\n\n    updatePayment( payment, month){\n        console.log(\"change\")\n        console.log( month)\n        console.log( payment)\n        payment = Number(payment)\n        let mort_table = this.state.mort_table.slice(0,month)\n        const old_month = this.state.mort_table[month]\n        console.log(old_month)\n        const new_amort = payment - old_month.interest\n        console.log(new_amort)\n        console.log(\"old mort: \" + old_month.amortization)\n        const new_balance = old_month.balance - (new_amort - old_month.amortization)\n        console.log(new_balance)\n        const new_mort_tot = old_month.tot_mort + (new_amort - old_month.amortization)\n        console.log(mort_table)\n\n        mort_table.push(\n            {\n                month: month,\n                payed: payment,\n                interest: old_month.interest,\n                amortization: new_amort,\n                balance: new_balance,\n                tot_int: old_month.tot_int,\n                tot_mort: new_mort_tot\n            }\n        )\n\n        let month_int = this.state.interest * .01 / 12;\n        let due_monthly = monthCost(this.state.principal, month_int, this.state.years * 12)\n        mort_table = mort_table.concat(\n             amortization_table(due_monthly, new_balance, month_int, month + 1,old_month.tot_int ,new_mort_tot)\n        )\n        this.setState(\n            {mort_table: mort_table}\n        )\n\n\n        \n    }\n    \n\n    render() {\n        return (\n          <div>\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                Principal:\n                <input type=\"text\" value={this.state.principal} onChange={this.handlePrincipal} /> \n                </label>\n                <label>\n                Interest %:\n                <input type=\"text\" value={this.state.interest} onChange={this.handleInterest}/>\n                </label>\n                <label>\n                Years:\n                <input type=\"text\" value={this.state.years} onChange={this.handleYears} /> \n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <div>\n                {this.getCost()}\n            </div>\n            <div>\n                {this.getAmortizationTable()}\n            </div>\n          </div>\n        );\n    }\n\n}\n\n\nclass TableRow extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            payed: this.props.payed,\n        }\n        this.handlePay = this.handlePay.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    handlePay(event) {\n        this.setState(\n            {payed: event.target.value}\n        )\n    }\n\n    update(event) {\n        this.props.onChange(event.target.value, this.props.month)\n    }\n\n\n    render() {\n        let month = this.props.month\n        let interest = this.props.interest\n        let amortization = this.props.amortization\n        let tot_int = this.props.tot_int\n        let tot_mort = this.props.tot_mort\n        let balance = this.props.balance\n        return (\n        <tr>\n            <td>{month}</td>\n            <td>\n                <input row={month} value={this.state.payed} onChange={this.handlePay} onBlur={this.update}/>\n            </td>\n            <td>{interest}</td>\n            <td>{amortization}</td>\n            <td>{tot_int}</td>\n            <td>{tot_mort}</td>\n            <td>{tot_mort + tot_int}</td>\n            <td>{balance}</td>\n        </tr>\n        )\n    }\n}\n\n\n","import React from 'react';\n//import { monthCost, amortization_table} from './mortgageMath'\n\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts';\n\n\nconst colors = ['black', 'blue', 'fuchsia', 'gray', 'green', \n'lime', 'maroon', 'navy', 'olive', 'orange', 'purple', 'red', \n'silver', 'teal', 'white', 'yellow']\n\nexport function GraphMort(props){\n  console.log(props)\n  const mortTables = props.mortTables\n  const descriptions = props.descriptions\n  const graphSlots = 12 * props.graphYears\n  const dataKey = props.dataKey\n\n\n  //getting max number of month\n  let max_month = 0;\n  for (let step = 0; step < mortTables.length; step++) {\n    if (max_month < mortTables[step].length) {\n      max_month = mortTables[step].length\n    }\n  }\n  \n  let graphData = []\n  //formatting the data for graph\n  for (let step = 0; step < mortTables.length; step++){\n    if (step === 0) {\n      for (let month = 0; month < graphSlots; month++) {\n        let data_point = {};\n        data_point[descriptions[step]] = mortTables[step][month][dataKey];\n        graphData.push(data_point);\n      }\n      \n    } else {\n      for (let month = 0; month < graphSlots; month++) {\n        graphData[month][descriptions[step]] = mortTables[step][month][dataKey];\n\n      }\n    }\n  }\n  console.log(graphData)\n  return (\n    <div>\n      <h3>The {dataKey} for {graphSlots / 12} years</h3>\n      <LineChart width={730} height={250} data={graphData}\n           margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n              \n        <XAxis />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Legend verticalAlign=\"bottom\" height={36}/>\n        {descriptions.map((row, i) => {\n                        return (\n\n                          <Line type=\"monotone\" dataKey={row} fillOpacity={1} stroke={colors[i]}/>\n\n\n                        );\n                    })}\n      </LineChart>\n\n    </div>\n\n        \n  );\n}\n\n","import React from 'react';\n\n\nexport function TableMort(props){\n  console.log(props)\n  const mortTables = props.mortTables\n  const descriptions = props.descriptions\n  const maxRows = props.tableRows\n  const dataKey = props.dataKey\n  const rowInterval = 12\n\n\n  \n  let tableData = []\n  //formatting the data for graph\n  for (let step = 0; step < mortTables.length; step++){\n    if (step === 0) {\n      for (let row = 0; row <= maxRows; row++) {\n        let data_point = {};\n        data_point[descriptions[step]] = mortTables[step][row * rowInterval][dataKey];\n        tableData.push(data_point);\n      }\n      \n    } else {\n      for (let row = 0; row <= maxRows; row++) {\n        tableData[row][descriptions[step]] = mortTables[step][row * rowInterval][dataKey];\n\n      }\n    }\n  }\n  console.log(tableData)\n  return (\n    <div>\n      <h3>{dataKey}</h3>\n       <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                      <th>Interval</th>\n                      {\n                        descriptions.map( (description) => {\n                          return (\n                            <th>{description}</th>\n                          )\n                        })\n                      }\n                    </tr>\n                </thead>\n                <tbody>\n                  {\n                    tableData.map( (row, index) => {\n                      return (\n                        <tr>\n                          <td>{index*rowInterval + \"months\"}</td>\n                          {\n                            descriptions.map( (description) => {\n                              return (\n                                <td>\n                                  {row[description]}\n                                </td>\n                              )\n                              \n                            })\n                          }\n                        </tr>\n                      )\n                    })\n\n                  }\n                </tbody>\n            </table>\n\n    </div>\n\n        \n  );\n}\n\n","import React from 'react';\nimport { monthCost, amortization_table} from './mortgageMath';\nimport { GraphMort } from './graphMort';\nimport { TableMort } from './tableMort';\n\n\nexport class MortForm extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {principal: 214544,\n                      interest: 3.5,\n                      years: 30,\n                      submitted: false,\n                      month: 0,\n                      mort_tables: [],\n                      descriptions: [],\n                      graphYears: 5,\n                    };\n        this.handlePrincipal = this.handlePrincipal.bind(this);\n        this.handleInterest = this.handleInterest.bind(this);\n        this.handleYears = this.handleYears.bind(this);\n        this.handleGraph = this.handleGraph.bind(this);\n        this.handleGraphYears = this.handleGraphYears.bind(this);\n\n\n    }\n\n    handlePrincipal(event) {\n        this.setState({principal: Number(event.target.value)});\n    }\n\n    handleInterest(event) {\n        this.setState({interest: event.target.value});\n    }\n\n    handleYears(event) {\n        this.setState({years: event.target.value});\n    }\n\n    handleGraphYears(event) {\n        this.setState({graphYears: event.target.value})\n    }\n\n    handleGraph(event) {\n        //console.log(this.state.interest)\n        //console.log(this.state.years)\n        let month_int = this.state.interest * .01 / 12;\n        let due_monthly = monthCost(this.state.principal, month_int, this.state.years * 12)\n        let mort_table = amortization_table(due_monthly, this.state.principal, month_int)\n        let mort_tables = this.state.mort_tables.slice()\n        mort_tables.push(mort_table)\n\n        let description = \"principal: \" + this.state.principal + \" Interest: \" + this.state.interest + \" Years: \" + this.state.years\n        let descriptions = this.state.descriptions.slice();\n        descriptions.push(description)\n        this.setState(\n            { month: due_monthly,\n              mort_tables: mort_tables,\n              descriptions: descriptions,\n            }\n        );\n\n        this.setState({submitted: true});\n        console.log(\"getting graphs\")\n\n        event.preventDefault();\n    }\n\n\n    getGraph() {\n        if (this.state.submitted) {\n            return (\n                <div>\n                    {[\"tot_cost\", \"tot_int\", \"tot_mort\"].map((row) => {\n                        return (\n\n                            <GraphMort \n                                mortTables={this.state.mort_tables}\n                                descriptions={this.state.descriptions}\n                                graphYears={this.state.graphYears}\n                                dataKey={row}\n                            />\n\n                        );\n                    })}\n                    \n                </div>\n            )\n        } else {\n            return (\n            <a>\n                waiting for input\n            </a>\n            )\n        }\n\n    }\n\n\n    getTable() {\n        if (this.state.submitted) {\n            return (\n                <div>\n                    {[\"tot_cost\", \"tot_int\", \"tot_mort\"].map((row) => {\n                        return (\n\n                            <TableMort\n                                mortTables={this.state.mort_tables}\n                                descriptions={this.state.descriptions}\n                                tableRows={this.state.graphYears}\n                                dataKey={row}\n                            />\n\n                        );\n                    })}\n                    \n                </div>\n            )\n        } else {\n            return (\n            <a>\n            </a>\n            )\n        }\n\n    }\n\n    \n    \n\n    render() {\n        return (\n          <div>\n            <form onSubmit={this.handleGraph}>\n                <label>\n                Principal:\n                <input type=\"text\" value={this.state.principal} onChange={this.handlePrincipal} /> \n                </label>\n                <label>\n                Interest %:\n                <input type=\"text\" value={this.state.interest} onChange={this.handleInterest}/>\n                </label>\n                <label>\n                Years:\n                <input type=\"text\" value={this.state.years} onChange={this.handleYears} /> \n                </label>\n                <label>\n                    Years to graph:\n                    <input type=\"text\" value={this.state.graphYears} onChange={this.handleGraphYears} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <div>\n                {this.getGraph()}\n            </div>\n            <div>\n                {this.getTable()}\n            </div>\n          </div>\n        );\n    }\n\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {RateForm} from './rate.js';\nimport {GraphMort} from './graphMort.js';\nimport { MortForm } from './mortForm';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MortForm/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}